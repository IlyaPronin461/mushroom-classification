import logging
import os
import asyncio
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InputTextMessageContent,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    InlineQueryHandler,
    ChosenInlineResultHandler,
)
from telegram.constants import ParseMode
from app.services import MushroomClassifier
from app.config import settings, logger
from app.tasks import classify_mushroom_image
from app.DataBase import DataBase


import base64
import redis
import pickle


class TelegramBot:
    class FakeMessage:
        def __init__(self, text, user):
            self.text = text
            self.from_user = user
            self.chat = user  # –û–±—ã—á–Ω–æ chat —Ç–∞–∫–∂–µ —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            self.message_id = 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è

        # –ò–∑–º–µ–Ω—è–µ–º reply_text –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ —Å message_id
        async def reply_text(self, text, parse_mode=None, reply_markup=None):
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç. –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
            print(f"Replying with text: {text}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º message_id
            return TelegramBot.FakeReply(message_id=self.message_id)

    class FakeReply:
        def __init__(self, message_id):
            self.message_id = message_id  # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ message_id, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω –≤ handle_text

    def __init__(self, token: str, classifier: MushroomClassifier, db: DataBase):
        self.token = token
        self.classifier = classifier
        self.db = db

        self.redis_client = redis.StrictRedis(host='redis', port=6379, db=0)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ Redis, –∏—Å–ø–æ–ª—å–∑—É—è pickle –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.redis_client.set('mushroom_classifier', pickle.dumps(self.classifier))

        self.logger = logging.getLogger("app.telegram_bot")
        self.app = Application.builder().token(self.token).build()
        self.user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∏–±–æ–≤
        self.mushroom_images = self._load_mushroom_images()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.send_help_message))
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        self.app.add_handler(CallbackQueryHandler(self.handle_button))
        self.app.add_handler(InlineQueryHandler(self.handle_inline_query))
        self.app.add_handler(ChosenInlineResultHandler(self.handle_chosen_inline_result))

    def _load_mushroom_images(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∏–±–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –≤ –ø–∞–º—è—Ç—å"""
        folder_path = "mushroom_photo"
        mushroom_images = {}

        for filename in os.listdir(folder_path):
            if filename.lower().endswith('.jpg'):
                file_path = os.path.join(folder_path, filename)
                mushroom_images[filename[:-4]] = file_path

        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(mushroom_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥—Ä–∏–±–æ–≤")
        return mushroom_images

    def _find_similar_mushrooms(self, query: str, limit: int = 5):
        """–ù–∞—Ö–æ–¥–∏—Ç –≥—Ä–∏–±—ã, –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø—Ä–æ—Å (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)"""
        self.logger.debug(f"–ü–æ–∏—Å–∫ –≥—Ä–∏–±–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
        query = query.lower().strip()
        matches = []

        for name in self.mushroom_images.keys():
            if query in name.lower():
                matches.append(name)
                if len(matches) >= limit:
                    break

        self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
        return sorted(matches)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.message.from_user.id
        username = update.message.from_user.username

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        existing_user = self.db.get_user_by_telegram_id(user_id)
        if not existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            self.db.create_user(username, user_id)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [KeyboardButton("/start"), KeyboardButton("/help")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        welcome_text = (
            "üçÑ <b>–ì—Ä–∏–±–Ω–æ–π –ü–æ–º–æ—â–Ω–∏–∫</b> üçÑ\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∏–±—ã –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:"
        )
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

        # inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∏–±–∞ –ø–æ —Ñ–æ—Ç–æ –∏ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
        inline_keyboard = [
            [InlineKeyboardButton("üîç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∏–± –ø–æ —Ñ–æ—Ç–æ", callback_data='identify')],
            [InlineKeyboardButton("üìñ –ù–∞–π—Ç–∏ –≥—Ä–∏–± –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data='search')]
        ]
        reply_markup_inline = InlineKeyboardMarkup(inline_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup_inline,
            parse_mode=ParseMode.HTML
        )

    # –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ inline-–∑–∞–ø—Ä–æ—Å–∞
    async def handle_inline_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        query = update.inline_query.query
        if not query:
            return

        user_id = update.inline_query.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î —Å —Ç–∏–ø–æ–º "search_by_name_inline" (–∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å)
        query_type = "search_by_name_inline"
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π
        matches = self._find_similar_mushrooms(query, limit=10)
        results = []

        self.logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—Å—Ç–æ–º: '{query}'")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
        for idx, name in enumerate(matches):
            results.append(
                InlineQueryResultArticle(
                    id=str(idx),
                    title=name.capitalize(),
                    input_message_content=InputTextMessageContent(
                        message_text=f"üçÑ {name.capitalize()}",
                        parse_mode=ParseMode.HTML
                    ),
                    description=f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ {name}"
                )
            )

        self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
            await update.inline_query.answer(results, cache_time=1)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline-–∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

        # –¢–µ–ø–µ—Ä—å –≤—ã–∑–æ–≤–µ–º handle_text, –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∏–±–∞ –≤—Ä—É—á–Ω—É—é
        if results:
            # –í—ã–±–∏—Ä–∞–µ–º –≥—Ä–∏–± –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            chosen_name = results[0].input_message_content.message_text.strip("üçÑ ").lower()
            self.logger.debug(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä–∏–±: {chosen_name}")

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç update –¥–ª—è –≤—ã–∑–æ–≤–∞ handle_text
            fake_message = self.FakeMessage(chosen_name, update.inline_query.from_user)
            fake_update = type('FakeUpdate', (object,),
                               {'message': fake_message, 'from_user': update.inline_query.from_user})

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ handle_text
            self.logger.debug(f"–ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä–∏–± –≤ handle_text: {chosen_name}")
            # –ü–µ—Ä–µ–¥–∞–µ–º fake_update –∏ context –≤ handle_text
            await self.handle_text(fake_update, context)

    async def handle_chosen_inline_result(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä–∏–±–∞ –∏–∑ inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            result = update.chosen_inline_result
            query = result.query.strip().lower()

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä–∏–± (result_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å—É –≤ matches)
            result_id = int(result.result_id)
            matches = self._find_similar_mushrooms(query, limit=10)

            if not matches or result_id >= len(matches):
                self.logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≥—Ä–∏–± –ø–æ ID: {result_id} (–∑–∞–ø—Ä–æ—Å: {query})")
                return

            mushroom_name = matches[result_id]
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä–∏–±: {mushroom_name}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≥—Ä–∏–±–∞
            if mushroom_name in self.mushroom_images:
                photo_path = self.mushroom_images[mushroom_name]

                caption = (
                    f"üçÑ <b>{mushroom_name.capitalize()}</b>\n\n"
                )

                try:
                    with open(photo_path, 'rb') as photo_file:
                        await context.bot.send_photo(
                            chat_id=result.from_user.id,
                            photo=photo_file,
                            caption=caption,
                            parse_mode=ParseMode.HTML
                        )
                    self.logger.info(f"–§–æ—Ç–æ –≥—Ä–∏–±–∞ {mushroom_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
                    await context.bot.send_message(
                        chat_id=result.from_user.id,
                        parse_mode=ParseMode.HTML
                    )
            else:
                self.logger.error(f"–§–æ—Ç–æ –¥–ª—è –≥—Ä–∏–±–∞ {mushroom_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await context.bot.send_message(
                    chat_id=result.from_user.id,
                    text=f"‚ùå –§–æ—Ç–æ –≥—Ä–∏–±–∞ '{mushroom_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ."
                )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_chosen_inline_result: {str(e)}", exc_info=True)

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
            message = await update.message.reply_text("üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            photo_file = await update.message.photo[-1].get_file()
            photo_bytes = await photo_file.download_as_bytearray()

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.message.from_user.id
            user_name = update.message.from_user.username

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î —Å —Ç–∏–ø–æ–º "define_by_photo" (–ø–æ —Ñ–æ—Ç–æ)
            query_type = "define_by_photo"
            mushroom_image = photo_bytes  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.db.save_query(user_id, query_type, mushroom_image)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ç–æ –≤ base64 –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –∑–∞–¥–∞—á—É Celery –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            photo_base64 = base64.b64encode(photo_bytes).decode('utf-8')
            task = classify_mushroom_image.apply_async(args=[photo_base64])

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∑–∞–¥–∞—á–∏
            predictions = task.get()

            if len(predictions) == 1 and predictions[0]['class_name'] == '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å':
                warn = predictions[0]
                warn_msg = (
                    "‚ö†Ô∏è <b>–Ø –Ω–µ —Å–º–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥—Ä–∏–±</b>\n\n"
                    f"–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è (<b>{warn['confidence']:.1f}%</b>).\n"
                    f"{warn['description']}"
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º ¬´üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶¬ª –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                await message.edit_text(warn_msg, parse_mode=ParseMode.HTML)

                # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]]
                await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
                return

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            response = "üçÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n"
            for i, pred in enumerate(predictions[:5], 1):
                class_name = pred['class_name']
                confidence = pred['confidence']
                description = settings.mushroom_descriptions.get(
                    class_name,
                    f"{class_name}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—ä–µ–¥–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                )
                response += (
                    f"{i}. <b>{class_name.capitalize()}</b>\n"
                    f"<i>{description}</i>\n"
                    f"–¢–æ—á–Ω–æ—Å—Ç—å: {confidence:.1f}%\n\n"
                )

            response += (
                "\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –º–∏–∫–æ–ª–æ–≥–æ–º. "
                "–í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –≥—Ä–∏–±–æ–≤ –≤ –ø–∏—â—É."
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await message.edit_text(response, parse_mode=ParseMode.HTML)

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=reply_markup
            )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            )

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –≥—Ä–∏–±–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)"""
        try:
            user_id = update.message.from_user.id
            query = update.message.text.strip()

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{query}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "üçÑ", —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ë–î
            if query.startswith("üçÑ "):
                query_type = "search_by_name"
                self.db.save_query(user_id, query_type, query_text=query)

            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
            if query == "/start":
                await self.start_command(update, context)
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
            elif query == "/help":
                await self.send_help_message(update, context)
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /help –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞

            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∏–±–∞
            if query.startswith("üçÑ "):
                query = query[2:].strip()  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª "üçÑ" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ (–Ω–∞–∂–∞–ª "–ù–∞–π—Ç–∏ –≥—Ä–∏–± –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
            if self.user_states.get(user_id) == 'searching':
                matches = self._find_similar_mushrooms(query, limit=5)

                self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –≥—Ä–∏–±–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")

                if not matches:
                    await update.message.reply_text(
                        "‚ùå –ü–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä–∏–±–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å..."
                    )
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
                buttons = []
                for name in matches:
                    display_name = name.capitalize()
                    buttons.append([InlineKeyboardButton(display_name, callback_data=f"select_{name}")])

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')])

                reply_markup = InlineKeyboardMarkup(buttons)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                response = (
                    f"üîç <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≥—Ä–∏–± –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
                )

                if 'last_suggestion_msg_id' in context.user_data:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=update.message.chat_id,
                            message_id=context.user_data['last_suggestion_msg_id'],
                            text=response,
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.HTML
                        )
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏: {str(e)}")
                        msg = await update.message.reply_text(
                            response,
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.HTML
                        )
                        context.user_data['last_suggestion_msg_id'] = msg.message_id
                else:
                    msg = await update.message.reply_text(
                        response,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.HTML
                    )
                    context.user_data['last_suggestion_msg_id'] = msg.message_id

                # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if query.lower() in [m.lower() for m in matches]:
                    await self._send_mushroom_details(update, context, query)
                    context.user_data.pop('last_suggestion_msg_id', None)
                    self.user_states.pop(user_id, None)

            else:
                # –û–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
                matches = self._find_similar_mushrooms(query)

                self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –≥—Ä–∏–±–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.")

                if not matches:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await update.message.reply_text(
                        "‚ùå –ì—Ä–∏–±—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.\n\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–±–µ–ª—ã–π', '–ª–∏—Å–∏—á–∫–∞', '–æ–ø–µ–Ω–æ–∫'",
                        reply_markup=reply_markup
                    )
                    return

                if len(matches) == 1:
                    await self._send_mushroom_details(update, context, matches[0])
                else:
                    buttons = []
                    for name in matches[:10]:
                        display_name = name.capitalize()
                        buttons.append([InlineKeyboardButton(display_name, callback_data=f"select_{name}")])

                    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])

                    reply_markup = InlineKeyboardMarkup(buttons)

                    response = (
                        f"üîé <b>–ù–∞–π–¥–µ–Ω–æ {len(matches)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':</b>\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≥—Ä–∏–± –∏–∑ —Å–ø–∏—Å–∫–∞:"
                    )

                    await update.message.reply_text(
                        response,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.HTML
                    )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    async def send_help_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
        help_text = (
            "üçÑ <b>–ì—Ä–∏–±–Ω–æ–π –≠–∫—Å–ø–µ—Ä—Ç - –ü–æ–º–æ—â—å</b> üçÑ\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∏–±—ã –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∏–±–∞—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n\n"
            "1. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>'/start'</b> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.\n"
            "2. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≥—Ä–∏–±–∞, –≤—ã–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É <b>'üîç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∏–± –ø–æ —Ñ–æ—Ç–æ'</b>, –∏ –±–æ—Ç –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ.\n"
            "3. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≥—Ä–∏–± –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>'üìñ –ù–∞–π—Ç–∏ –≥—Ä–∏–± –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'</b>.\n"
            "4. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∏–±–∞, –∏ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥—Ä–∏–±–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.\n"
            "üîé –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∏–±–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [[KeyboardButton("/start"), KeyboardButton("/help")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if query.data == 'identify':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≥—Ä–∏–±–∞ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "üì∏ <b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∏–±–∞ –ø–æ —Ñ–æ—Ç–æ</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –≥—Ä–∏–±–∞ (–ª—É—á—à–µ –≤—Å–µ–≥–æ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —à–ª—è–ø–∫—É –∏ –Ω–æ–∂–∫—É)",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            self.user_states[user_id] = 'identifying'

        elif query.data == 'search':
            bot_username = context.bot.username
            keyboard = [
                [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"üîé <b>–ü–æ–∏—Å–∫ –≥—Ä–∏–±–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é</b>\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>'–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'</b> –Ω–∏–∂–µ, –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –ø–æ–∏—Å–∫—É. –õ–∏–±–æ –∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä–∏–±–∞ –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞ —è –ø–æ–ø—Ä–æ–±—É—é –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!\n\n"
                f"–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:\n"
                f"<code>@{bot_username} –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä–∏–±–∞</code>\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>@{bot_username} –º—É—Ö–æ–º</code>\n\n"
                f"–Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –º–µ—Ä–µ –≤–≤–æ–¥–∞!",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            self.user_states[user_id] = 'searching'

        elif query.data.startswith("select_"):
            mushroom_name = query.data[7:]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä–∏–±
            query_type = "search_by_name"
            self.db.save_query(user_id, query_type, query_text=f'üçÑ {mushroom_name}')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥—Ä–∏–±–µ
            await self._send_mushroom_details_query(query, context, mushroom_name)

            # –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states.pop(user_id, None)

        elif query.data == 'back_to_start':
            await self.start_command(query, context)
            self.user_states.pop(user_id, None)

    async def _send_mushroom_details(self, update, context, mushroom_name):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∏–±–µ"""
        try:
            if mushroom_name not in self.mushroom_images:
                await update.message.reply_text(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∏–±–µ '{mushroom_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≥—Ä–∏–±–∞
            photo_path = self.mushroom_images[mushroom_name]

            formatted_desc = (
                f"üçÑ <b>{mushroom_name.capitalize()}</b>\n\n"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≥—Ä–∏–±–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            with open(photo_path, 'rb') as photo_file:
                await update.message.reply_photo(
                    photo=photo_file,
                    caption=formatted_desc,
                    parse_mode=ParseMode.HTML
                )

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=reply_markup
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –≥—Ä–∏–±–∞: {str(e)}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä–∏–±–µ.")

    async def _send_mushroom_details_query(self, query, context, mushroom_name):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∏–±–µ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫)"""
        try:
            if mushroom_name not in self.mushroom_images:
                await query.edit_message_text(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∏–±–µ '{mushroom_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            photo_path = self.mushroom_images[mushroom_name]

            formatted_desc = (
                f"üçÑ <b>{mushroom_name.capitalize()}</b>\n\n"
            )

            await query.message.reply_photo(
                photo=open(photo_path, 'rb'),
                caption=formatted_desc,
                parse_mode=ParseMode.HTML
            )

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=reply_markup
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –≥—Ä–∏–±–∞: {str(e)}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä–∏–±–µ.")

    async def _send_mushroom_photo(self, update, context, mushroom_name):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≥—Ä–∏–±–∞"""
        try:
            if mushroom_name in self.mushroom_images:
                with open(self.mushroom_images[mushroom_name], 'rb') as photo_file:
                    await update.message.reply_photo(
                        photo=photo_file,
                        caption=f"üçÑ {mushroom_name.capitalize()}"
                    )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≥—Ä–∏–±–∞: {str(e)}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        self.logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()

        while True:
            await asyncio.sleep(3600)
